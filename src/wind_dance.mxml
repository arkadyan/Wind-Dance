<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
		layout="absolute" 
		width="620" height="680" 
		initialize="init()">
	
	
	<mx:Script>
		<![CDATA[
			import mx.logging.Log;
			import mx.controls.Alert;
			import mx.logging.ILogger;
			
			import com.littlesecretsrecords.util.WeatherDataImporter;
			import com.littlesecretsrecords.model.Reading;
			import com.littlesecretsrecords.drawing.WindBarb;
			
			
			private static const TERMINAL_CIRCLE_WIDTH:int = 15;
			private static const TERMINAL_CIRCLE_WEIGHT:int = 1;
			private static const TERMINAL_CIRCLE_COLOR:int = 50;
			
			private static const COMPASS_STROKE_COLOR:int = 0;
			private static const CARDINAL_LENGTH:int = 10;
			private static const CARDINAL_WEIGHT:int = 4;
			private static const INTERMEDIATE_LENGTH:int = 7;
			private static const INTERMEDIATE_WEIGHT:int = 2;
			private static const MINOR_LENGTH:int = 4;
			private static const MINOR_WEIGHT:int = 1;
			
			private static const STEP_MULTIPLIER:Number = 2.5;
			private static const EXTRA_MOVE_CONST:int = 190;
			private static const MOVE_FROM_LAST_STEP_DISTANCE:int = 250;
			
			
			private var logger:ILogger = Log.getLogger("wind_dance");
			
			private var inputFile:String;
			private var date:String;
			private var startingOffsetX:int;
			private var startingOffsetY:int;
			private var firstHour:int;
			private var lastHour:int;
			private var center:Number;
			private var currentPos:Point;
			private var barbs:Array;
			
			
			private function init():void {
				setDataGridColumns();
				
				date = '2010-01-01';
				startingOffsetX = 0;
				startingOffsetY = 0;
				firstHour = 0;
				lastHour = 23;
				
				center = canvas.width / 2;
				
				// Start in the center if no offset is defined
				if (startingOffsetX == 0) {
					startingOffsetX = center;
				}
				if (startingOffsetY == 0) {
					startingOffsetY = center;
				}
				
				currentPos = new Point(startingOffsetX, startingOffsetY);
			}
			
			private function setDataGridColumns():void {
				dataGrid.columns = [dataGrid.nameColumn, dataGrid.typeColumn, dataGrid.sizeColumn];
			}
			
			
			private function displayFilePicker():void {
				filePickerView.visible = true;
			}
			
			private function cancelInputFileLoad():void {
				hideFilePickerView();
			}
			
			private function loadInputFile(selectedPath:String):void {
				// Hide any old error messages				
				filePickerErrorsView.visible = false;
				
				// TODO: Test for selected file.
				if (!selectedPath) {
					filePickerErrorsText.text = "Please select a file";
					filePickerErrorsView.visible = true;
				} else {
					var file:File = File.documentsDirectory.resolvePath(selectedPath);
					var inputFileStream:FileStream = new FileStream();
					inputFileStream.open(file, FileMode.READ);
					var fileContents:String = inputFileStream.readMultiByte(inputFileStream.bytesAvailable, "iso-8859-1");
					inputFile = fileContents;
					
					hideFilePickerView();
					
					loadData();
				}
			}
			
			private function hideFilePickerView():void {
				filePickerView.visible = false;
			}
			
			private function loadData():Array {
				var previousBarb:WindBarb;
				
				// Pull readings for each hour in the data using the WeatherDataImporter
				barbs = new Array();
				for (var hour:int=firstHour; hour<=lastHour; hour++) {
					var reading:Reading = WeatherDataImporter.pullDataForDateHour(inputFile, date, hour);
					if (reading) {
						logger.info("hour " + hour + " => " + reading.windSpeed + ", " + reading.windDirection);
					} else {
						Alert.show("Problem with the data: No reading for " + date + ", hour " + hour);
					}
					previousBarb = new WindBarb(new Point(canvas.width/2, canvas.height/2), reading.windSpeed, reading.windDirection, previousBarb);
					barbs.push(previousBarb);
				}
				
				return barbs;
			}
			
		]]>
	</mx:Script>
	
	
	<mx:VBox 
			x="0" y="0" 
			horizontalAlign="center" verticalAlign="top" 
			verticalGap="10"
			paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">
		
		<mx:Canvas id="canvas" 
				width="600" height="600" 
				backgroundColor="#FFFFFF">
			
		</mx:Canvas>
		
		<mx:HBox width="100%" horizontalAlign="center" horizontalGap="10">
			
			<mx:Button label="Load File" 
					click="displayFilePicker()"/>
			
			<mx:Button label="Print"/>
			
		</mx:HBox>
		
	</mx:VBox>
	
	
	<mx:VBox id="filePickerView" 
			visible="false" x="50" y="200"
			backgroundColor="#888888" 
			paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
			
		<mx:HBox id="filePickerErrorsView"
				width="100%" 
				backgroundColor="#FFFFFF" 
				visible="false">
				
			<mx:Label id="filePickerErrorsText"
					text="" 
					color="#FF0000"/>
			
		</mx:HBox>
		
		<mx:HDividedBox>
			<mx:FileSystemTree id="tree" 
				width="200" height="100%" 
				directory="{File.userDirectory}" 
				enumerationMode="directoriesOnly" 
				change="dataGrid.directory = File(tree.selectedItem);"/>
			<mx:FileSystemDataGrid id="dataGrid" 
				width="100%" height="100%"
				directory="{File.userDirectory}"/>
		</mx:HDividedBox>
		
		<mx:HBox width="100%" horizontalAlign="right">
		
			<mx:Button label="Cancel"
					click="cancelInputFileLoad()"/>
			<mx:Button id="openFileButton" 
					label="Open File" 
					click="loadInputFile(dataGrid.selectedPath)"/>
					
		</mx:HBox>
			
	</mx:VBox>
	
</mx:WindowedApplication>
