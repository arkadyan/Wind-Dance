require 'ruby-processing'
require 'weather_data_importer'
require 'point'
require 'wind_barb'
require 'arrow'


class DanceDiagram < Processing::App
	
	include WeatherDataImporter
	

	TERMINAL_CIRCLE_WIDTH = 15
	TERMINAL_CIRCLE_WEIGHT = 1
	TERMINAL_CIRCLE_COLOR = 50
	
	COMPASS_STROKE_COLOR = 0
	CARDINAL_LENGTH = 10
	CARDINAL_WEIGHT = 4
	INTERMEDIATE_LENGTH = 7
	INTERMEDIATE_WEIGHT = 2
	MINOR_LENGTH = 4
	MINOR_WEIGHT = 1
	
	STEP_MULTIPLIER = 2.5
	EXTRA_MOVE_CONST = 190
	MOVE_FROM_LAST_STEP_DISTANCE = 250
	
	
	def initialize(options={})
		@dates = options[:dates] || '01.08.2009'
		@input_file = options[:input_file] || 'data/spws-data-flux-809-data_only.csv'
		@output_file = options[:output_file] || 'test_diagram'
		@starting_offset_x = options[:starting_offset_x] || '0'
		@starting_offset_x = @starting_offset_x.to_i
		@starting_offset_y = options[:starting_offset_y] || '0'
		@starting_offset_y = @starting_offset_y.to_i
		@first_hour = options[:first_hour] || '0'
		@first_hour = @first_hour.to_i
		@last_hour = options[:last_hour] || '23'
		@last_hour = @last_hour.to_i
		@days_per_diagram = options[:days_per_diagram] || '1'
		@days_per_diagram = @days_per_diagram.to_i
		super
	end
	
	
	def setup
		no_loop
		smooth
		
		@center = width / 2

		# Start in the center if no offset is defined
		@starting_offset_x = @center if @starting_offset_x == 0
		@starting_offset_y = @center if @starting_offset_y == 0
		puts "@starting_offset_x=#{@starting_offset_x}, @starting_offset_y=#{@starting_offset_y}"
		
		@current_pos = Point.new(@starting_offset_x, @starting_offset_y)
		
		@barbs = load_data
	end
  
	def draw
		background 255
		stroke 0
		render_compass_points
		render_barbs
		save_image
		exit
	end
	
	
	def load_data
		previous_barb = nil
		
		# Pull readings for each hour in the data using the WeatherDataImporter
		barbs = []
		puts "@days_per_diagram=#{@days_per_diagram}, @first_hour=#{@first_hour}, @last_hour=#{@last_hour}"
		(1..@days_per_diagram).each do |day|
			date = @dates.split(',')[day-1]
			(@first_hour..@last_hour).each do |hour|
				reading = pull_data_for_date_hour(@input_file, date, "#{hour}")
				if reading
					puts "hour #{hour} => #{reading[:wind_speed]}, #{reading[:wind_direction]}"
				else
					puts "!!! No reading for #{date}, hour #{hour} !!!"
				end
				previous_barb = WindBarb.new(reading[:wind_speed], reading[:wind_direction], previous_barb)
				barbs << previous_barb
			end
		end
		
		barbs
	end
	
	
	def render_compass_points
		stroke COMPASS_STROKE_COLOR
		
		# Cardinal directions
		stroke_weight CARDINAL_WEIGHT
		render_opposite_compass_points CARDINAL_LENGTH, Math::PI/2
		
		# Intermediate directions
		stroke_weight INTERMEDIATE_WEIGHT
		render_opposite_compass_points INTERMEDIATE_LENGTH, Math::PI/4
		
		# Minor directions
		stroke_weight MINOR_WEIGHT
		render_opposite_compass_points MINOR_LENGTH, Math::PI/8
		render_opposite_compass_points MINOR_LENGTH, Math::PI/8 + Math::PI/4
		
		stroke_weight 1
	end
	
	def render_opposite_compass_points(length, angle)
		push_matrix
		translate @center, @center
		rotate angle
		line -@center, 0, -@center+length, 0
		line @center-length, 0, @center, 0
		pop_matrix
		
		push_matrix
		translate @center, @center
		rotate Math::PI/2+angle
		line -@center, 0, -@center+length, 0
		line @center-length, 0, @center, 0
		pop_matrix
	end
	
	def render_barbs
		# Render the starting terminal circle if it's a calm step
		render_terminal_circle(@current_pos) if @barbs.first.speed==0
		
		@barbs.each_with_index do |barb, index|
			new_x = @current_pos.x
			new_y = @current_pos.y
			# Only move if we are past the first step
			if index > 0
				move_distance = barb.speed==0 ? 0 : barb.speed*STEP_MULTIPLIER+EXTRA_MOVE_CONST
				# puts "barb.speed=#{barb.speed}, move_distance=#{move_distance}"
				delta_x = move_distance * Math.cos(barb.direction_in_radians)
				delta_y = move_distance * Math.sin(barb.direction_in_radians)
				new_x += delta_x
				new_y += delta_y
			end
			
			barb.pos.x = new_x
			barb.pos.y = new_y
			
			# If this is a calm barb and the last barb was a step, 
			# move away from it in the same direction
			if barb.speed==0 and barb.previous_barb and barb.previous_barb.speed > 0
				barb.pos.x -= MOVE_FROM_LAST_STEP_DISTANCE*Math.cos((3*Math::PI-barb.previous_barb.direction_in_radians).abs)
				barb.pos.y += MOVE_FROM_LAST_STEP_DISTANCE*Math.sin((3*Math::PI-barb.previous_barb.direction_in_radians).abs)
			end
			
			# Let the barb know if it is the last calm barb in a sequence
			if barb.speed==0 && barb.previous_barb && barb.previous_barb.speed==0 && !@barbs[index+1] || (@barbs[index+1] && @barbs[index+1].speed>0)
				barb.last_calm_barb = true
			end

			# Draw arrow from previous step to the new step
			Arrow.new(barb).render

			# Render the barb
			barb.render
			puts "rendering barb at #{barb.pos.x}, #{barb.pos.y}"
			
			@current_pos.set(barb.pos.x, barb.pos.y)
		end
			
		# Render the final terminal circle if it's a calm step
		render_terminal_circle(@barbs.last.pos) if @barbs.last.speed==0
	end
	
	def render_terminal_circle(pos)
		stroke_weight TERMINAL_CIRCLE_WEIGHT
		stroke TERMINAL_CIRCLE_COLOR
		no_fill
		
		ellipse pos.x, pos.y, TERMINAL_CIRCLE_WIDTH, TERMINAL_CIRCLE_WIDTH
	end
	
	def save_image
		save @output_file
	end
end


# Run like: rp5 run dance_diagram.rp5 DanceDiagram 700 700 01.08.2009 data/spws-data-flux-809-data_only.csv test_diagram
width = ARGV[0].to_i
height = ARGV[1].to_i
dates = ARGV[2].to_s
input_file = ARGV[3].to_s
output_file = ARGV[4].to_s
starting_offset_x = ARGV[5].to_s
starting_offset_y = ARGV[6].to_s
first_hour = ARGV[7].to_s
last_hour = ARGV[8].to_s
DanceDiagram.new :title => 'Wind Dance', :width => width, :height => height, :dates => dates, :input_file => input_file, :output_file => output_file, :starting_offset_x => starting_offset_x, :starting_offset_y => starting_offset_y, :first_hour => first_hour, :last_hour => last_hour, :days_per_diagram => dates.split(',').size
